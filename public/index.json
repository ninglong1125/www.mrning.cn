[{"content":"Linux命令简单记录 #创建用户并分配bash #useradd \u0026lt;user\u0026gt; -s /bin/bash 更改用户密码 #passwd \u0026lt;username\u0026gt; 更改文件(夹)用户权限 #chown -R \u0026lt;username\u0026gt; \u0026lt;filename\u0026gt; 查询进程 #ps -aux | grep \u0026lt;name\u0026gt; 查询端口 #lsof -i :8080 查询内存 #free -h 查询磁盘 #df -h 查询当前文件夹占用空间 #du -sh 统计文件夹下的文件夹数目 #ls | wc -w 查看文件后几行内容 # tail -n 5 \u0026lt;filename\u0026gt; 删除某一目录下的所有特定类型文件 #find \u0026lt;dirname\u0026gt; -name \u0026#34;*.ckpt\u0026#34; | xargs rm -rf 解压*.tar.gz文件 #tar -xvzf *.tar.gz 解压*.tar.xz文件 #tar -xvf *.tar.xz 将文件夹压缩成*.tar.gz #tar -zcvf \u0026lt;dirname\u0026gt;.tar.gz \u0026lt;dirname\u0026gt; 将文件夹压缩成*.zip #zip -q -r \u0026lt;dirname\u0026gt;.zip \u0026lt;dirname\u0026gt; ","date":"2022/9/9","permalink":"/posts/linux/","section":"我的文章","summary":"记录几个我经常使用，但是却经常忘的Linux命令。","title":"Linux命令简单记录"},{"content":"","date":null,"permalink":"/","section":"个人小站🦄","summary":"","title":"个人小站🦄"},{"content":" 记录生活，享受生活 您可以通过 RSS订阅所有博客文章\n","date":null,"permalink":"/posts/","section":"我的文章","summary":"记录生活，享受生活 您可以通过 RSS订阅所有博客文章","title":"我的文章"},{"content":"介绍 #ohttps中docker-nginx类型的部署节点用于实现将 ohttps 中申请的证书部署至 nginx 容器中。\n使用方法 #使用docker-nginx类型的部署节点，使用 ohttps 官方提供的nginx容器镜像ohttps/ohttps-nginx。 该镜像是基于nginx官方稳定版镜像nginx:1.16构建，添加了证书更新服务后生成的。ohttps/ohttps-nginx镜像内的其他内容和使用方式和nginx官方镜像完全一致。\n拉取镜像 # sudo docker pull ohttps/ohttps-nginx 添加docker-nginx部署节点 #记录节点名称(PUSH_NODE_ID):push-xxxxxxxxxx 记录令牌(PUSH_NODE_ID):xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n配置docker-compose.yml文件 #version: \u0026#34;2\u0026#34; services: nginx: container_name: ohttps-nginx image: ohttps/ohttps-nginx restart: always ports: - \u0026#34;80:80\u0026#34; - \u0026#34;443:443\u0026#34; environment: # 节点名称 PUSH_NODE_ID: \u0026#34;push-xxxxxxxxxxxxx\u0026#34; # 令牌 PUSH_NODE_TOKEN: \u0026#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; volumes: # nginx配置所在地 - /etc/nginx/conf.d:/etc/nginx/conf.d # nginx日志所在地 - /etc/nginx/logs:/var/log/nginx # 部署文件所在地 - /opt:/opt 安装docker-compose并将其移动至/usr/local/bin #wget https://hub.fastgit.org/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 mv docker-compose-linux-x86_64 docker-compose chmod +x docker-compose sudo mv docker-compose /usr/local/bin 运行docker-compose.yml文件并打开ohttps 官网部署 #sudo docker-compose -f docker-compose.yml up -d 启动之后，进入到对应的镜像，然后在/etc/nginx/certificates目录下看是否已经更新了对应的证书.\ndocker exec -it ohttps-nginx /bin/bash cd /etc/nginx/certificates ls 测试站点 #附录 #http.conf\nserver { listen 0.0.0.0:80 default_server; listen [::]:80 default_server; server_name ~^(.*)$; rewrite ^(.*) https://$host$request_uri; } https.conf\nserver { listen 0.0.0.0:443 ssl http2; listen [::]:443 ssl http2; # cert-xxxx为证书目录 ssl_certificate /etc/nginx/certificates/cert-xxxx/fullchain.cer; ssl_certificate_key /etc/nginx/certificates/cert-xxxx/cert.key; server_name badnl.com www.badnl.com; if ($host = badnl.com) { rewrite ^(.*) https://www.badnl.com$request_uri; } root /opt/www.badnl.com/public; index index.html; } server { listen 0.0.0.0:443 ssl http2; listen [::]:443 ssl http2; # cert-xxxx为证书目录 ssl_certificate /etc/nginx/certificates/cert-xxxx/fullchain.cer; ssl_certificate_key /etc/nginx/certificates/cert-xxxx/cert.key; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE; ssl_prefer_server_ciphers on; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; add_header Strict-Transport-Security \u0026#34;max-age=31536000\u0026#34;; client_max_body_size 200m; server_name dev.badnl.com ; location / { proxy_pass http://IP:PORT; proxy_set_header Host $host; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection upgrade; proxy_set_header Accept-Encoding gzip; proxy_set_header X-real-ip $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } server { listen 0.0.0.0:443 ssl http2; listen [::]:443 ssl http2; # cert-xxxx为证书目录 ssl_certificate /etc/nginx/certificates/cert-xxxx/fullchain.cer; ssl_certificate_key /etc/nginx/certificates/cert-xxxx/cert.key; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE; ssl_prefer_server_ciphers on; ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; add_header Strict-Transport-Security \u0026#34;max-age=31536000\u0026#34;; server_name cdn.badnl.com; client_max_body_size 200m; root /opt/cdn.badnl.com; index index.html; location / { autoindex on; autoindex_exact_size off; autoindex_localtime on; add_header \u0026#39;Access-Control-Allow-Origin\u0026#39; \u0026#39;*\u0026#39;; expires 30d; log_not_found off; } } ","date":"2022/1/8","permalink":"/posts/ohttps/","section":"我的文章","summary":"使用 ohttps 官方提供的nginx容器镜像ohttps/ohttps-nginx来配置网站https服务。","title":"使用ohttps自带的docker-nginx来配置https服务"},{"content":"介绍 #本隐私政策旨在帮助您了解我们对可能从您那里收集的或您提供给我们的任何信息的做法，我们使用这些信息的方式，以及我们如何处理这些信息。\n鉴于我们不收集任何个人数据，我们的做法直截了当，并致力于保护您的隐私。\n信息处理 #Dejavu’s Blog 是一个非商业性质的个人独立博客站点，我们致力于保护用户隐私。根据这一点，我们确认，在您访问我们的网站时，我们不会收集、存储或处理您的任何个人数据。\n个人数据是指有可能识别你个人的任何信息。由于我们不收集此类信息，所以我们没有可能使用、分享或出售这些数据。\n服务组成 #Cloudflare 我们的站点由 Cloudflare 托管，所有的流量均会经过其全球分发网络和节点，Cloudflare 处理终端用户与客户的互联网财产和服务的互动。\n当最终用户访问的域名、网站、API、应用程序、设备、终端和使用我们一项或多项服务的网络时，以及当最终用户访问或使用 Cloudflare Zero Trust 等服务时，这些信息将得到处理。 所处理的信息可能包括但不限于 IP 地址、流量路由数据、系统配置信息，以及其他关于进出客户网站、设备、应用程序和/或网络的流量信息。\n除非您非法攻击本网站，您才有可能被 Cloudflare 收集以上信息。对于正常的访问，我们使用 Cloudflare 免费计划，其至多保存 7 天以内的 WAF 或 DDOS 日志。\n有关更多信息，请参阅 Cloudflare 的 隐私条款。\nPlausible #我们的站点使用自托管的 Plausible 用于跟踪网站流量的总体趋势，而不是跟踪单个访问者。我们不使用 Cookie，也不收集任何个人数据。Plausible 仅使用 MaxMind 的 GeoLite2 数据库用于判断访客的大致地理位置，此信息仅用于 Plausible 粗粒度的统计，我们不生成任何持久标识符，我们不收集或存储任何个人或可识别数据。所有数据仅为汇总数据，且不会用于 IP 地址或是用户信息指纹相关的关联。\n有关更多信息，请参阅 Plausible 的 隐私策略 和 数据政策。\nArtalk #自 2023 年 6 月 9 日起，我们已经切换评论系统为自托管的 Artalk 评论系统。在此过程中，我们开启了 IP 归属地和用户代理 (User-Agent) 在 Artalk 中的显示功能。\nIP 归属地的判断是通过使用离线 IP 数据库 ip2region 进行的。对于中国大陆用户，该判断可以精确到城市级别。然而，对于海外用户，该判断的准确度较低。请注意，您可以使用任意代理来欺骗显示的 IP 归属地，这完全在您的权利范围之内。\n用户代理将显示您的操作系统和浏览器版本。尽管这个判断并非完全准确，但您仍然可以使用任意用户代理来欺骗 User-Agent 的显示内容。同样地，这也在您的权利范围之内。\n所有上述数据仅用于我们网站的个性化显示，绝不会被出售或故意泄露给任何第三方或组织。我们将严格保护您的隐私。\n安全声明 #虽然我们不收集个人数据，但我们非常重视您在提供任何非个人数据方面的信任，因此我们尽全力使用可接受的方法来保护这些数据、维护我们所使用服务在物理层面或软件层面的安全性。然而，没有任何一种互联网传输方法或电子存储方法是 100% 安全和可靠的，我们不能保证其绝对安全。\n政策变更 #我们可能会不时地更新我们的隐私政策。因此，我们建议你定期查看本页面以了解任何变化。我们将通过在本页面上发布新的隐私政策来通知您任何变化。这些变化在本页面上公布后立即生效。\n联系我们 #如果您对本隐私政策有任何疑问，请随时通过电子邮件与我们联系：admin@mrning.cn。\n","date":"2022/1/8","permalink":"/privacy/","section":"个人小站🦄","summary":"使用 ohttps 官方提供的nginx容器镜像ohttps/ohttps-nginx来配置网站https服务。","title":"隐私政策"},{"content":" This section assumes you have already installed the Congo theme. The config files that ship with Congo contain all of the possible settings that the theme recognises. By default, many of these are commented out but you can simply uncomment them to activate or change a specific feature.\nBasic configuration #Before creating any content, there are a few things you should set for a new installation. Starting in the config.toml file, set the baseURL and languageCode parameters. The languageCode should be set to the main language that you will be using to author your content.\n# config/_default/config.toml baseURL = \u0026#34;https://your_domain.com/\u0026#34; languageCode = \u0026#34;en\u0026#34; The next step is to configure the language settings. Although Congo supports multilingual setups, for now, just configure the main language.\nLocate the languages.en.toml file in the config folder. If your main language is English you can use this file as is. Otherwise, rename it so that it includes the correct language code in the filename. For example, for French, rename the file to languages.fr.toml.\nThe language code in the language config filename should match the languageCode setting in config.toml. # config/_default/languages.en.toml title = \u0026#34;My awesome website\u0026#34; [params.author] name = \u0026#34;My name\u0026#34; image = \u0026#34;img/author.jpg\u0026#34; headline = \u0026#34;A generally awesome human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { twitter = \u0026#34;https://twitter.com/username\u0026#34; } ] The [params.author] configuration determines how the author information is displayed on the website. The image should be placed in the site\u0026rsquo;s assets/ folder. Links will be displayed in the order they are listed.\nIf you need extra detail, further information about each of these configuration options, is covered in the Configuration section.\nColour schemes #Congo ships with a number of colour schemes out of the box. To change the scheme, simply set the colorScheme theme parameter. Valid options are congo (default), avocado, cherry, fire, ocean, sapphire and slate.\nThe colourScheme value should be provided in lowercase. # config/_default/params.toml colorScheme = \u0026#34;congo\u0026#34; Congo defines a three-colour palette that is used throughout the theme. Each main colour contains ten shades which are based upon the colours that are included in Tailwind.\nOrganising content #By default, Congo doesn\u0026rsquo;t force you to use a particular content type. In doing so you are free to define your content as you wish. You might prefer pages for a static site, posts for a blog, or projects for a portfolio.\nDirectory structure #Here\u0026rsquo;s a quick overview of a basic Congo project. All content is placed within the content folder:\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── congo The key thing to note here is that within the content directory, normal article pages are named index.md while list pages are named _index.md. Any assets that go along with the article should be placed in a sub-directory alongside the index file. It\u0026rsquo;s important to have a firm grasp of how Hugo expects content to be organised as the theme is designed to take full advantage of Hugo page bundles. Be sure to read the official Hugo docs for more information.\nFeature, cover and thumbnail images #The Congo theme supports displaying images on article listings and at the top of individual article pages. There are three types of images supported, each with their own use case: feature, cover and thumb.\nIn the example below, a cover and thumb image have been provided for the first-post article:\n. └── content └── posts ├── _index.md └── first-post ├── cover.jpg ├── index.md └── thumb.jpg The thumb image is used as the article thumbnail and will be displayed in article lists, and the cover image will be displayed at the top of the article content on individual article pages.\nThis example shows an article with a thumbnail image. In order to provide maximum performance, thumbnail images are automatically cropped and resized to a 4:3 ratio. Cover images will be automatically resized to fit their content, but any ratio is permitted. The feature image is a special type, and when present, it will be used in place of both the thumb and cover images. Feature images are also present in the article metadata, which is included when content is shared to third-party networks like Facebook and Twitter.\nThe theme will intelligently detect article images and automatically add them to your site. You don\u0026rsquo;t have to refer to them in the front matter and simply need to place an appropriately named file within the page resources. If the term feature, cover or thumb is found anywhere in the image filename, then it will be used for that purpose.\nThe Samples section provides a number of examples of these images (and you can view the source code to see the file structure).\nTaxonomies #Congo is also flexible when it comes to taxonomies. Some people prefer to use tags and categories to group their content, others prefer to use topics.\nHugo defaults to using posts, tags and categories out of the box and this will work fine if that\u0026rsquo;s what you want. If you wish to customise this, however, you can do so by creating a taxonomies.toml configuration file:\n# config/_default/taxonomies.toml topic = \u0026#34;topics\u0026#34; This will replace the default tags and categories with topics. Refer to the Hugo Taxonomy docs for more information on naming taxonomies.\nWhen you create a new taxonomy, you will need to adjust the navigation links on the website to point to the correct sections, which is covered below.\nMenus #Congo has two menus that can be customised to suit the content and layout of your site. The main menu appears in the site header and the footer menu appears at the bottom of the page just above the copyright notice.\nBoth menus are configured in the menus.en.toml file. Similarly to the languages config file, if you wish to use another language, rename this file and replace en with the language code you wish to use. Menu links will be sorted from lowest to highest weight, and then alphabetically by name.\n# config/_default/menus.en.toml [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Topics\u0026#34; pageRef = \u0026#34;topics\u0026#34; weight = 20 [[main]] name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/jpanther/congo\u0026#34; weight = 30 [main.params] icon = \u0026#34;github\u0026#34; showName = false target = \u0026#34;_blank\u0026#34; [[main]] identifier = \u0026#34;search\u0026#34; weight = 99 [main.params] action = \u0026#34;search\u0026#34; icon = \u0026#34;search\u0026#34; [[footer]] name = \u0026#34;Privacy\u0026#34; pageRef = \u0026#34;privacy\u0026#34; Basic links #The name parameter specifies the text that is used in the menu link. You can also optionally provide a title which fills the HTML title attribute for the link.\nThe pageRef parameter allows you to easily reference Hugo content pages and taxonomies. It is the quickest way to configure the menu as you can simply refer to any Hugo content item and it will automatically build the correct link. To link to external URLs, the url parameter can be used.\nFurther customisation can be achieved through the use of special theme parameters. Providing params within a link allows the addition of an icon, the ability to toggle the link text with showName and to optionally set a target for the URL. In the example above, the GitHub link will only display as an icon and will open the link in a new window.\nAction links #There is a special case for creating menu items for links that take theme actions. These are denoted using the action parameter, and a value of the action the link should perform. Action links allow for all the same custom parameters as other links and can be styled with an icon or text name.\nThere are three valid theme actions:\nappearance will create a link to the appearance switcher locale will create a drop down picker to access translated content search will create a link to the site search Both menus are completely optional and can be commented out if not required. Use the template provided in the default file as a guide.\nDetailed configuration #The steps above are the bare minimum configuration. If you now run hugo server you will be presented with a blank Congo website. Detailed configuration is covered in the Configuration section.\n","date":"2020/8/15","permalink":"/posts/getting-started/","section":"我的文章","summary":"This section assumes you have already installed the Congo theme and are ready to start with basic configuration tasks like selecting a colour scheme, menu and content structure.","title":"Getting Started"},{"content":"","date":null,"permalink":"/topics/","section":"Topics","summary":"","title":"Topics"}]